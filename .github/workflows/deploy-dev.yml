name: Demo CI/CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
      # - '.github/**'

permissions:
  id-token: write 
  contents: read 

env:
  PROJECT_NAME: sankred9527
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: dev

jobs:
  build-and-push:
    name: Build and Push ${{ matrix.app-name }}
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.app-name }}
      cancel-in-progress: true
    strategy:
      matrix:
        app-name: ["testaws_jobs"]
        arch: ["amd64"]
        os: ["linux"]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ASSUME_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.PROJECT_NAME }}/${{ matrix.app-name }}:${{ env.IMAGE_TAG }} -f ./Dockerfile .;

      - name: Push Image
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/${{ env.PROJECT_NAME }}/${{ matrix.app-name }}:${{ env.IMAGE_TAG }}

      - name: deploy service with new image
        run: |
          aws ecs update-service --cluster ${{ vars.ECS_CLUSTER }} --service ${{ vars.ECS_SERVICE }} --force-new-deployment --region ${{ env.AWS_REGION }}


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11  

      - name: Package Lambda code
        run: |
          cd lambda-tools/ && cp -f package.zip package-prod.zip && zip package-prod.zip index.py
          if ! aws s3 ls s3://testjobs-787jh31jlam/ &> /dev/null; then
            aws s3 mb s3://testjobs-787jh31jlam/
            
            aws s3api put-public-access-block  --bucket testjobs-787jh31jlam \
            --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"

            aws s3api put-bucket-policy --bucket testjobs-787jh31jlam --policy file://readonly-bucket-policy.json

            # ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            # aws s3control create-access-point  --account-id $ACCOUNT_ID  --name my-access-point --bucket testjobs-787jh31jlam
            # aws s3control put-access-point-policy --account-id $ACCOUNT_ID --name your-access-point-name --policy \ 
            # '{"Version": "2012-10-17", "Statement": [{"Sid": "PublicReadGetObject", "Effect": "Allow", "Principal": "*", "Action": "s3:GetObject", "Resource": "arn:aws:s3:ap-northeast-1:'"$ACCOUNT_ID"':accesspoint/my-access-point/object/*"}]}'
          fi
          aws s3 cp package-prod.zip s3://testjobs-787jh31jlam/package-prod.zip
          aws lambda update-function-code --function-name testjobs-function --s3-bucket testjobs-787jh31jlam --s3-key package-prod.zip
